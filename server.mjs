// server.mjs
import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// ------------------ Ïú†Ìã∏ ------------------ //
function safeLoadJSON(relPath) {
  const abs = path.join(__dirname, relPath);
  try {
    const text = fs.readFileSync(abs, "utf-8");
    const json = JSON.parse(text);
    return { ok: true, data: json, path: abs };
  } catch (e) {
    return { ok: false, error: e.message, path: abs };
  }
}
const pick = (arr) => arr[Math.floor(Math.random() * arr.length)];

// ------------------ Îç∞Ïù¥ÌÑ∞ Î°úÎìú & Ï†ïÍ∑úÌôî(Î≥ÑÏûêÎ¶¨) ------------------ //
const RAW = safeLoadJSON("constellations_88_ko_named.json");

// 1) ÏµúÏÉÅÏúÑÍ∞Ä Î∞∞Ïó¥Ïù¥Îì† {"constellations":[‚Ä¶]}Îì† Î™®Îëê Ìù°Ïàò
let list = Array.isArray(RAW.data) ? RAW.data : (RAW.data?.constellations || []);
if (!Array.isArray(list)) list = [];

// 2) Í∞í Îß§Ìïë
const seasonMap = {
  spring: "Î¥Ñ",
  summer: "Ïó¨Î¶Ñ",
  autumn: "Í∞ÄÏùÑ",
  fall: "Í∞ÄÏùÑ",
  winter: "Í≤®Ïö∏",
  "year-round": "Ïó∞Ï§ë"
};
const hemiMap = { N: "Î∂ÅÎ∞òÍµ¨", S: "ÎÇ®Î∞òÍµ¨", E: "Î∂ÅÎ∞òÍµ¨" };

// 3) ÏÑúÎ≤Ñ Í∏∞ÎåÄ Ïä§ÌÇ§ÎßàÎ°ú Î≥ÄÌôò
const constellations = list.map((c) => {
  const stars =
    Array.isArray(c?.notable_stars)
      ? c.notable_stars.map((s) => s?.name_ko).filter(Boolean)
      : Array.isArray(c?.stars)
      ? c.stars
      : [];

  const season =
    c?.season ||
    seasonMap[(c?.best_season_northern || "").toLowerCase()] ||
    "Ïó∞Ï§ë";
  const hemisphere =
    hemiMap[c?.hemisphere] || c?.hemisphere || "Î∂ÅÎ∞òÍµ¨";

  return {
    name_en: c?.name_en || c?.english || c?.name || "",
    name_ko: c?.name_ko || c?.korean || "",
    hemisphere,
    season,
    stars
  };
}).filter(c => c.name_ko && c.name_en);

// ‚úÖ ÌïúÍµ≠Ï≤úÎ¨∏Ïó∞Íµ¨Ïõê Í∏∞Ï§Ä ‚ÄúÍ≤åÏûêÎ¶¨=Í≤®Ïö∏‚Äù Î≥¥Ï†ï
for (const c of constellations) {
  if (c.name_ko === "Í≤åÏûêÎ¶¨" || c.name_en?.toLowerCase() === "cancer") {
    c.season = "Í≤®Ïö∏";
  }
}

console.log(`[boot] constellations normalized: ${constellations.length}Í∞ú (from ${RAW.path}) ${RAW.ok ? "" : "‚ùå "+RAW.error}`);

// ------------------ ÌÉúÏñë/Îã¨ Îç∞Ïù¥ÌÑ∞ ------------------ //
const SOL = safeLoadJSON("solar_system.json");
const solarSystemRaw = Array.isArray(SOL.data) ? SOL.data : [];
console.log(`[boot] solarSystem loaded: ${solarSystemRaw.length}Í∞ú (from ${SOL.path}) ${SOL.ok ? "" : "‚ùå "+SOL.error}`);

// Ïπ¥ÌÖåÍ≥†Î¶¨ Î≥ÑÏπ≠ ÏßÄÏõê
const SOLAR_ALIASES = new Set(["solar","sun","planet","planets","eclipse","sol"]);
const LUNAR_ALIASES = new Set(["moon","lunar","phases","lunAR","moonphase"]);

function filterByAliases(items, aliases) {
  return items.filter(q => {
    const c = String(q?.category || "").toLowerCase().trim();
    return aliases.has(c);
  });
}

// ------------------ ÌÄ¥Ï¶à ÏÉùÏÑ±Í∏∞ ------------------ //
function makeSeasonQuiz() {
  const pool = constellations.filter(c => c.hemisphere === "Î∂ÅÎ∞òÍµ¨" && c.season && c.name_ko);
  if (!pool.length) return null;
  const c = pick(pool);
  const seasons = ["Î¥Ñ", "Ïó¨Î¶Ñ", "Í∞ÄÏùÑ", "Í≤®Ïö∏"];
  return {
    question: `Q) ${c.name_ko}Îäî Î∂ÅÎ∞òÍµ¨ Í∏∞Ï§Ä Ïñ¥Îñ§ Í≥ÑÏ†àÏùò Î≥ÑÏûêÎ¶¨ÏùºÍπåÏöî?`,
    choices: seasons,
    answerIndex: seasons.indexOf(c.season),
    explanation: `${c.name_ko}Îäî ${c.season}Ï≤†Ïóê Ïûò Î≥¥Ïù¥Îäî Î≥ÑÏûêÎ¶¨ÏûÖÎãàÎã§.`
  };
}

function makeStarQuiz() {
  const pool = constellations.filter(c => Array.isArray(c.stars) && c.stars.length && c.name_ko);
  if (!pool.length) return null;
  const c = pick(pool);
  const star = pick(c.stars);
  const wrongs = constellations
    .filter(x => x.name_ko !== c.name_ko)
    .sort(() => Math.random() - 0.5)
    .slice(0, 3)
    .map(x => x.name_ko);
  const choices = [c.name_ko, ...wrongs].sort(() => Math.random() - 0.5);
  return {
    question: `Q) ‚Äò${star}‚Äô Î≥ÑÏùÄ Ïñ¥Îäê Î≥ÑÏûêÎ¶¨Ïóê ÏÜçÌï¥ ÏûàÏùÑÍπåÏöî?`,
    choices,
    answerIndex: choices.indexOf(c.name_ko),
    explanation: `${star}Îäî ${c.name_ko}Ïóê ÏÜçÌïú Î≥ÑÏûÖÎãàÎã§.`
  };
}

function makeHemisphereQuiz() {
  const pool = constellations.filter(c => c.name_ko && c.hemisphere);
  if (!pool.length) return null;
  const c = pick(pool);
  const choices = ["Î∂ÅÎ∞òÍµ¨", "ÎÇ®Î∞òÍµ¨"];
  return {
    question: `Q) ${c.name_ko}Îäî Ï£ºÎ°ú Ïñ¥Îäê Î∞òÍµ¨ÏóêÏÑú Ïûò Î≥¥ÏùºÍπåÏöî?`,
    choices,
    answerIndex: choices.indexOf(c.hemisphere),
    explanation: `${c.name_ko}Îäî ${c.hemisphere} Î≥ÑÏûêÎ¶¨ÏûÖÎãàÎã§.`
  };
}

// üîß Î≥ÑÏπ≠ÏùÑ ÌóàÏö©ÌïòÎäî ÌÉúÏñë/Îã¨ ÌÄ¥Ï¶à
function makeSolarQuiz() {
  const pool = filterByAliases(solarSystemRaw, SOLAR_ALIASES)
    .filter(q => Array.isArray(q?.choices) && typeof q?.answerIndex === "number");
  return pool.length ? pick(pool) : null;
}

function makeLunarQuiz() {
  const pool = filterByAliases(solarSystemRaw, LUNAR_ALIASES)
    .filter(q => Array.isArray(q?.choices) && typeof q?.answerIndex === "number");
  return pool.length ? pick(pool) : null;
}

function makeImageQuiz() {
  const pool = constellations.filter(c => c.name_ko && c.name_en);
  if (!pool.length) return null;
  const c = pick(pool);
  const imagePath = `/public/images/constellations_iau/${c.name_en.toLowerCase()}.svg`;
  const wrongs = pool
    .filter(x => x.name_ko !== c.name_ko)
    .sort(() => Math.random() - 0.5)
    .slice(0, 3)
    .map(x => x.name_ko);
  const choices = [c.name_ko, ...wrongs].sort(() => Math.random() - 0.5);
  return {
    question: "Q) Îã§Ïùå ÏÑ±ÎèÑ Ïù¥ÎØ∏ÏßÄÎäî Ïñ¥Îñ§ Î≥ÑÏûêÎ¶¨ÏùºÍπåÏöî?",
    choices,
    answerIndex: choices.indexOf(c.name_ko),
    explanation: `Ïù¥ ÏÑ±ÎèÑÎäî ${c.name_ko}(${c.name_en}) ÏûêÎ¶¨ÏûÖÎãàÎã§.`,
    image: imagePath
  };
}

// ------------------ Ï†ïÏ†Å/ÌéòÏù¥ÏßÄ ------------------ //
app.use("/public", express.static(path.join(__dirname, "public")));
app.get("/", (req, res) => res.sendFile(path.join(__dirname, "index.html")));
app.get("/health", (req, res) => res.json({ ok: true }));

// ÎîîÎ≤ÑÍ∑∏: Ïπ¥ÌÖåÍ≥†Î¶¨ ÏßëÍ≥Ñ
app.get("/debug", (req, res) => {
  const counts = {};
  for (const q of solarSystemRaw) {
    const k = String(q?.category || "unknown").toLowerCase();
    counts[k] = (counts[k] || 0) + 1;
  }
  res.json({
    constellations_count: constellations.length,
    solar_raw_count: solarSystemRaw.length,
    solar_category_counts: counts,
    solar_aliases_solar: [...SOLAR_ALIASES],
    solar_aliases_lunar: [...LUNAR_ALIASES],
    sample_constellation: constellations[0] || null,
    sample_solar: solarSystemRaw[0] || null
  });
});

// ------------------ API ------------------ //
app.post("/chat", (req, res) => {
  try {
    const mode = req.body?.mode || "random";
    const pickers = {
      season: makeSeasonQuiz,
      star: makeStarQuiz,
      hemisphere: makeHemisphereQuiz,
      solar: makeSolarQuiz,
      lunar: makeLunarQuiz,
      image: makeImageQuiz
    };

    let quiz = pickers[mode] ? pickers[mode]() : null;

    // ÏöîÏ≤≠ Î™®ÎìúÍ∞Ä solar/lunarÏù∏Îç∞ ÌíÄÏù¥ ÎπÑÎ©¥, ÎåÄÏ≤¥ÌïòÏßÄ ÎßêÍ≥† Î™ÖÌôïÌûà ÏóêÎü¨ Î∞òÌôò(ÏõêÏù∏ ÌååÏïÖ Ïâ¨ÏõÄ)
    if ((mode === "solar" || mode === "lunar") && !quiz) {
      return res.status(500).json({
        error: "NO_QUIZ_FOR_CATEGORY",
        message: `ÏöîÏ≤≠ Î™®Îìú(${mode})Ïóê Ìï¥ÎãπÌïòÎäî Î¨∏Ï†úÍ∞Ä ÏóÜÏäµÎãàÎã§. /debugÏóêÏÑú solar_category_countsÏôÄ aliasesÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.`
      });
    }

    // random ÎòêÎäî Îã§Î•∏ Î™®Îìú Ïã§Ìå® ÏãúÏóêÎäî ÎåÄÏ≤¥ ÏãúÎèÑ
    if (!quiz) {
      const order = [makeSeasonQuiz, makeStarQuiz, makeHemisphereQuiz, makeSolarQuiz, makeLunarQuiz, makeImageQuiz];
      for (const fn of order) {
        quiz = fn();
        if (quiz) break;
      }
    }

    if (!quiz || !Array.isArray(quiz.choices) || typeof quiz.answerIndex !== "number") {
      console.error("[/chat] INVALID_QUIZ_PAYLOAD", { mode, quizNull: !quiz });
      return res.status(500).json({ error: "INVALID_QUIZ_PAYLOAD" });
    }

    return res.json({ type: "quiz", data: quiz });
  } catch (e) {
    console.error("[/chat] error:", e);
    return res.status(500).json({ error: "QUIZ_SERVER_ERROR", message: String(e) });
  }
});

// ------------------ ÏÑúÎ≤Ñ ÏãúÏûë ------------------ //
app.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ Quiz server running on port ${PORT}`);
  console.log(`‚û°Ô∏è  Health: GET /health  |  Debug: GET /debug  |  Quiz: POST /chat`);
});
